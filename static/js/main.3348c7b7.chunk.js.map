{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","shareUrl","title","react_default","a","createElement","className","Helmet","name","content","itemProp","property","concat","src","WhatsappShareButton","url","separator","WhatsappIcon","size","round","TwitterShareButton","via","hashtags","TwitterIcon","FacebookShareButton","quote","FacebookIcon","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAgGeA,mLA1FX,IAAMC,EAAW,kDAEXC,EAAQ,gBAEd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAA,OAAD,KACLJ,EAAAC,EAAAC,cAAA,QAAMG,KAAK,cAAcC,QAAQ,uEAC3BC,SAAS,gBAEfP,EAAAC,EAAAC,cAAA,QAAMG,KAAK,2BAA2BC,QAAQ,gDAC9CN,EAAAC,EAAAC,cAAA,QAAMM,SAAS,SAASF,QAASR,IACjCE,EAAAC,EAAAC,cAAA,QAAMM,SAAS,eAAeF,QAAQ,uBACtCN,EAAAC,EAAAC,cAAA,QAAMM,SAAS,WAAWF,QAASR,EAAUS,SAAS,UACtDP,EAAAC,EAAAC,cAAA,QAAMM,SAAS,eAAeF,QAASR,EAAUS,SAAS,UAC1DP,EAAAC,EAAAC,cAAA,QAAMM,SAAS,iBAAiBF,QAAQ,QACxCN,EAAAC,EAAAC,cAAA,QAAMM,SAAS,kBAAkBF,QAAQ,QACzCN,EAAAC,EAAAC,cAAA,QAAMM,SAAS,WAAWF,QAAO,oBAAAG,OAAsBV,GAASQ,SAAS,SACzEP,EAAAC,EAAAC,cAAA,QAAMM,SAAS,UAAUF,QAAQ,YACjCN,EAAAC,EAAAC,cAAA,QAAMM,SAAS,iBAAiBF,QAAQ,yEACxCN,EAAAC,EAAAC,cAAA,QAAMM,SAAS,YAAYF,QAAQ,oBAEpCN,EAAAC,EAAAC,cAAA,QAAMG,KAAK,eAAeC,QAAQ,wBAClCN,EAAAC,EAAAC,cAAA,QAAMG,KAAK,eAAeC,QAAQ,cAClCN,EAAAC,EAAAC,cAAA,QAAMG,KAAK,gBAAgBC,QAAQ,uBACnCN,EAAAC,EAAAC,cAAA,QAAMG,KAAK,sBAAsBC,QAAQ,4BACzCN,EAAAC,EAAAC,cAAA,QAAMG,KAAK,kBAAkBC,QAAQ,mBACrCN,EAAAC,EAAAC,cAAA,QAAMG,KAAK,gBAAgBC,QAAQ,gDACnCN,EAAAC,EAAAC,cAAA,QAAMG,KAAK,iBAAiBC,QAAQ,yCAEhCN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,aACTV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,IAAKd,EACLC,MAAOA,EACPc,UAAU,MACVV,UAAU,oCACVH,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAcC,KAAM,GAAIC,OAAK,KAG/BhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEL,IAAKd,EACLC,MAAOA,EACPmB,IA5CA,QA6CAC,SA3CK,CAAC,WA4CNhB,UAAU,oCACVH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEL,KAAM,GACNC,OAAK,KAGThB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACET,IAAKd,EACLwB,MAAOvB,EACPI,UAAU,oCACVH,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CACER,KAAM,GACNC,OAAK,OAIbhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAf,SAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAGbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAf,SAKDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAGdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAf,kBAlFQqB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3348c7b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\nimport { Helmet } from \"react-helmet\";\nimport {TwitterShareButton,TwitterIcon,FacebookShareButton,FacebookIcon,WhatsappShareButton,WhatsappIcon} from 'react-share';\nclass App extends Component {\n  render() {\n    const shareUrl = 'https://pbs.twimg.com/media/Dr8sCEHWoAEaX6W.jpg';  \n    const via = 'Rohan';\n    const title = 'Twitter Image';\n    const hashtags = ['Twitter'];\n    return (\n      <div className=\"App\">\n      \t\t\t\t<Helmet>\n\t\t\t\t\t<meta name=\"description\" content=\"1 person wants answer to this question. Be the first one to respond.\"\n\t\t\t\t\t      itemProp=\"description\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta name=\"google-site-verification\" content=\"5etYwSJdPvs73RVzF_Hb-YPow1mvMGynMVfCWgoLQuo\" />\n\t\t\t\t\t<meta property=\"og:url\" content={shareUrl} />\n\t\t\t\t\t<meta property=\"og:site_name\" content=\"iTechs Information\" />\n\t\t\t\t\t<meta property=\"og:image\" content={shareUrl} itemProp=\"image\" />\n\t\t\t\t\t<meta property=\"og:image:url\" content={shareUrl} itemProp=\"image\" />\n\t\t\t\t\t<meta property=\"og:image:width\" content=\"700\" />\n\t\t\t\t\t<meta property=\"og:image:height\" content=\"400\" />\n\t\t\t\t\t<meta property=\"og:title\" content={`iTechs Article - ${title}`} itemProp=\"name\" />\n\t\t\t\t\t<meta property=\"og:type\" content=\"website\" />\n\t\t\t\t\t<meta property=\"og:description\" content=\"1 person wants answer to this question. Be the first one to respond.\" />\n\t\t\t\t\t<meta property=\"fb:app_id\" content=\"128678167815456\" />\n\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta name=\"twitter:site\" content=\"@testact7\" />\n    <meta name=\"twitter:title\" content=\"Top 10 Things Ever\" />\n    <meta name=\"twitter:description\" content=\"Up than 200 characters.\" />\n    <meta name=\"twitter:creator\" content=\"@rohanarihant7\" />\n    <meta name=\"twitter:image\" content=\"https://rohanmpllc.github.io/hello/buzz.jpg\" />\n    <meta name=\"twitter:domain\" content=\"https://rohanmpllc.github.io/hello/\" />\n\t\t\t\t</Helmet>\n        <header className=\"App-header\">\n        <div className=\"\">\n          <img src=\"buzz.jpg\"></img>\n          <div className=\"sizeof\">\n              <WhatsappShareButton\n                url={shareUrl}\n                title={title}\n                separator=\":: \"\n                className=\"Demo__some-network__share-button\">\n                <WhatsappIcon size={32} round />\n              </WhatsappShareButton>\n\n              <TwitterShareButton\n                url={shareUrl}\n                title={title}\n                via={via}\n                hashtags={hashtags}\n                className=\"Demo__some-network__share-button\">\n                <TwitterIcon\n                  size={32}\n                  round />\n              </TwitterShareButton>\n\n              <FacebookShareButton\n                url={shareUrl}\n                quote={title}\n                className=\"Demo__some-network__share-button\">\n                <FacebookIcon\n                  size={32}\n                  round />\n              </FacebookShareButton>\n          </div>\n        </div>\n          <div className=\"Demo__some-network\">\n\n            <div className=\"Demo__some-network__share-count\">\n              &nbsp;\n            </div>\n          </div>\n        <div className=\"Demo__some-network\">\n        \n\n          <div className=\"Demo__some-network__share-count\">\n            &nbsp;\n          </div>\n        </div>\n\n         <div className=\"Demo__some-network\">\n          \n\n          <div className=\"Demo__some-network__share-count\">\n            &nbsp;\n          </div>\n        </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}